// <auto-generated />
using System;
using Bank.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bank.Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241028212414_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Bank.Api.Accounts.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Bank.Api.Cards.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Bank.Api.Transactions.TransactionModels.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("TransactionType").HasValue("Transaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Bank.Api.Transactions.TransactionModels.ServicesPaymentTransaction", b =>
                {
                    b.HasBaseType("Bank.Api.Transactions.TransactionModels.Transaction");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("CardId");

                    b.ToTable("Transactions", t =>
                        {
                            t.Property("CardId")
                                .HasColumnName("ServicesPaymentTransaction_CardId");
                        });

                    b.HasDiscriminator().HasValue("ServicesPayment");
                });

            modelBuilder.Entity("Bank.Api.Transactions.TransactionModels.TellerMachineTransaction", b =>
                {
                    b.HasBaseType("Bank.Api.Transactions.TransactionModels.Transaction");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("CardId");

                    b.HasDiscriminator().HasValue("TellerMachine");
                });

            modelBuilder.Entity("Bank.Api.Transactions.TransactionModels.TransferTransaction", b =>
                {
                    b.HasBaseType("Bank.Api.Transactions.TransactionModels.Transaction");

                    b.Property<int>("ReceiverCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderCardId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ReceiverCardId");

                    b.HasIndex("SenderCardId");

                    b.HasDiscriminator().HasValue("Transfer");
                });

            modelBuilder.Entity("Bank.Api.Cards.Card", b =>
                {
                    b.HasOne("Bank.Api.Accounts.Account", "Owner")
                        .WithOne("Card")
                        .HasForeignKey("Bank.Api.Cards.Card", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Bank.Api.Transactions.TransactionModels.ServicesPaymentTransaction", b =>
                {
                    b.HasOne("Bank.Api.Cards.Card", "Card")
                        .WithMany("ServicesPaymentTrasnactions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Bank.Api.Transactions.TransactionModels.TellerMachineTransaction", b =>
                {
                    b.HasOne("Bank.Api.Cards.Card", "Card")
                        .WithMany("TellerMachineTransactions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Bank.Api.Transactions.TransactionModels.TransferTransaction", b =>
                {
                    b.HasOne("Bank.Api.Cards.Card", "ReceiverCard")
                        .WithMany("ReceivedTransferTransactions")
                        .HasForeignKey("ReceiverCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bank.Api.Cards.Card", "SenderCard")
                        .WithMany("SentTransferTransactions")
                        .HasForeignKey("SenderCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverCard");

                    b.Navigation("SenderCard");
                });

            modelBuilder.Entity("Bank.Api.Accounts.Account", b =>
                {
                    b.Navigation("Card")
                        .IsRequired();
                });

            modelBuilder.Entity("Bank.Api.Cards.Card", b =>
                {
                    b.Navigation("ReceivedTransferTransactions");

                    b.Navigation("SentTransferTransactions");

                    b.Navigation("ServicesPaymentTrasnactions");

                    b.Navigation("TellerMachineTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
